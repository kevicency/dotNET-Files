<TemplatesExport>
  <Template uid="9d3c4911-c026-4f4f-9b52-a301a9a69061" shortcut="setter" description="" text=" &lt;Setter Property=&quot;$Property$&quot;&#xD;&#xA;        Value=&quot;$Value$&quot; /&gt;" reformat="True" shortenQualifiedReferences="True">
    <Context>
      <XMLContext type="EVERYWHERE" />
    </Context>
    <Categories />
    <Variables>
      <Variable name="Property" expression="" initialRange="0" />
      <Variable name="Value" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="6d4abfef-4c27-4a51-b527-4efb46b2e333" shortcut="tm" description="Test Method" text="[Test]&#xD;&#xA;public void $TEST$()&#xD;&#xA;{&#xD;&#xA;	$END$&#xD;&#xA;}" reformat="True" shortenQualifiedReferences="True">
    <Context>
      <CSharpContext context="Everywhere" minimumLanguageVersion="2.0" />
    </Context>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables>
      <Variable name="TEST" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="7c3a5011-3c83-420f-b234-f9a6a1dbef57" shortcut="y" description="" text="y =&gt; y$END$" reformat="True" shortenQualifiedReferences="True">
    <Context>
      <CSharpContext context="Expression" minimumLanguageVersion="3.0" />
    </Context>
    <Categories />
    <Variables />
    <CustomProperties />
  </Template>
  <Template uid="0080f893-7e44-4812-bfe3-ed4cb5035ee4" shortcut="x" description="Lambda" text="x =&gt; x$END$" reformat="True" shortenQualifiedReferences="True">
    <Context>
      <CSharpContext context="Expression" minimumLanguageVersion="3.0" />
    </Context>
    <Categories />
    <Variables />
    <CustomProperties />
  </Template>
  <Template uid="9868bfc9-f08b-46c8-b2cc-50f7b82dbd19" shortcut="tsu" description="SetUp" text="[SetUp]&#xD;&#xA;public void SetUp() &#xD;&#xA;{&#xD;&#xA;	$END$&#xD;&#xA;}&#xD;&#xA;" reformat="True" shortenQualifiedReferences="True">
    <Context>
      <CSharpContext context="TypeMember" minimumLanguageVersion="2.0" />
    </Context>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables />
    <CustomProperties />
  </Template>
  <Template uid="ce159bdc-8cf4-4e45-8769-51495c9498a3" shortcut="ttd" description="Tear Down" text="[TearDown]&#xD;&#xA;public void TearDown() &#xD;&#xA;{&#xD;&#xA;	$END$&#xD;&#xA;}" reformat="True" shortenQualifiedReferences="True">
    <Context>
      <CSharpContext context="TypeMember" minimumLanguageVersion="2.0" />
    </Context>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables />
    <CustomProperties />
  </Template>
  <Template uid="158a388c-7acc-47a3-9a61-875066fa0f8e" shortcut="tfsu" description="Fixture SetUp" text="[TestFixtureSetUp]&#xD;&#xA;public void FixtureSetUp() &#xD;&#xA;{ &#xD;&#xA;	$END$&#xD;&#xA;}&#xD;&#xA;" reformat="True" shortenQualifiedReferences="True">
    <Context>
      <CSharpContext context="TypeMember" minimumLanguageVersion="2.0" />
    </Context>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables />
    <CustomProperties />
  </Template>
  <Template uid="bc3c8bb7-a537-4ebf-906f-4aa88d44dae5" shortcut="tftd" description="Fixture Tear Down" text="[TestFixtureTearDown]&#xD;&#xA;public void FixtureTearDown() &#xD;&#xA;{ &#xD;&#xA;	$END$&#xD;&#xA;}&#xD;&#xA;" reformat="True" shortenQualifiedReferences="True">
    <Context>
      <CSharpContext context="TypeMember" minimumLanguageVersion="2.0" />
    </Context>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables />
    <CustomProperties />
  </Template>
  <Template uid="4da3fb06-b7cd-48f1-af9f-69bb94f82b35" shortcut="tfc" description="clean nunit test fixture" text="[TestFixture]&#xD;&#xA;public class $FIXTURE$_Fixture&#xD;&#xA;{&#xD;&#xA;	$END$     &#xD;&#xA;}" reformat="True" shortenQualifiedReferences="True">
    <Context>
      <CSharpContext context="TypeAndNamespace" minimumLanguageVersion="2.0" />
    </Context>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables>
      <Variable name="FIXTURE" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="26d2d446-a399-4feb-b00f-c60c92f8fddf" shortcut="tff" description="full nunit test fixture class" text="[TestFixture]&#xD;&#xA;public class $FIXTURE$_Fixture&#xD;&#xA;{&#xD;&#xA;	#region SetUp &amp; TearDown&#xD;&#xA;&#xD;&#xA;    [TestFixtureSetUp]&#xD;&#xA;    public void FixtureSetUp() { }&#xD;&#xA;&#xD;&#xA;    [TestFixtureTearDown]&#xD;&#xA;    public void FixureTearDown() { }&#xD;&#xA;&#xD;&#xA;    [SetUp]&#xD;&#xA;    public void SetUp() { }&#xD;&#xA;&#xD;&#xA;    [TearDown]&#xD;&#xA;    public void TearDown() { }&#xD;&#xA;&#xD;&#xA;	#endregion&#xD;&#xA;&#xD;&#xA;    [Test]&#xD;&#xA;    public void $TEST$()&#xD;&#xA;    {&#xD;&#xA;       $END$     &#xD;&#xA;    }&#xD;&#xA;}" reformat="True" shortenQualifiedReferences="True">
    <Context>
      <CSharpContext context="TypeAndNamespace" minimumLanguageVersion="2.0" />
    </Context>
    <Categories>
      <Category name="NUnit" />
    </Categories>
    <Variables>
      <Variable name="FIXTURE" expression="" initialRange="0" />
      <Variable name="TEST" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="e4de4173-9c53-43de-a52d-9bc946c4a696" shortcut="z" description="" text="z =&gt; z$END$" reformat="True" shortenQualifiedReferences="True">
    <Context>
      <CSharpContext context="Expression" minimumLanguageVersion="3.0" />
    </Context>
    <Categories />
    <Variables />
    <CustomProperties />
  </Template>
  <Template uid="d4689153-a030-4e68-912a-4179a84c4c4c" shortcut="newa" description="new Array" text="new [] {$END$}" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="InCSharpExpression" minimumLanguageVersion="2.0" />
    </Scopes>
    <Categories />
    <Variables />
    <CustomProperties />
  </Template>
  <Template uid="e2e9dbfe-11a8-4bcb-807f-350823465300" shortcut="x" description="" text="function(x) {&#xD;&#xA;	$END$&#xD;&#xA;}" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="InJavaScriptFile" />
      <Scope type="InJavaScriptExpression" />
    </Scopes>
    <Categories />
    <Variables />
    <CustomProperties />
  </Template>
  <Template uid="fbe633ec-a201-44b2-b0d0-19c591e9878d" shortcut="func" description="" text="function ($ARGS$) {&#xD;&#xA;	$END$&#xD;&#xA;}" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="InJavaScriptFile" />
    </Scopes>
    <Categories />
    <Variables>
      <Variable name="ARGS" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="ec4cf659-8b45-4356-b586-942a0a397be0" shortcut="barrow" description="" text="=()=&gt;" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="InCSharpFile" minimumLanguageVersion="2.0" />
      <Scope type="InCSharpExpression" minimumLanguageVersion="2.0" />
    </Scopes>
    <Categories>
      <Category name="MSpec" />
    </Categories>
    <Variables />
    <CustomProperties />
  </Template>
  <Template uid="498d5ae5-a613-4302-b00f-8ae0072f6004" shortcut="spec" description="A MSpec spec template" text="[Subject(typeof($TYPE$))]&#xD;&#xA;public class When_Context&#xD;&#xA;{&#xD;&#xA;	Establish context = () =&gt; { $END$ };&#xD;&#xA;&#xD;&#xA;	Because of = () =&gt; { };&#xD;&#xA;&#xD;&#xA;	It should_ = () =&gt; { };&#xD;&#xA;}" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="InCSharpFile" minimumLanguageVersion="2.0" />
      <Scope type="InCSharpTypeAndNamespace" minimumLanguageVersion="2.0" />
      <Scope type="InCSharpTypeMember" minimumLanguageVersion="2.0" />
    </Scopes>
    <Categories>
      <Category name="MSpec" />
    </Categories>
    <Variables>
      <Variable name="TYPE" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="cb0cc99f-0aed-42a1-9f7f-c66b48c5313b" shortcut="bec" description="MSpec Because" text="Because of = () =&gt; $END$;" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="InCSharpTypeMember" minimumLanguageVersion="2.0" />
    </Scopes>
    <Categories>
      <Category name="MSpec" />
    </Categories>
    <Variables />
    <CustomProperties />
  </Template>
  <Template uid="d8b7317a-dc5a-44e1-88e3-3a8a1b01f637" shortcut="est" description="MSpec Establish" text="Establish context = () =&gt; $END$;" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="InCSharpTypeMember" minimumLanguageVersion="2.0" />
    </Scopes>
    <Categories>
      <Category name="MSpec" />
    </Categories>
    <Variables />
    <CustomProperties />
  </Template>
  <Template uid="748bb4ec-3b13-4466-ba5c-e1d47d6ed9af" shortcut="it" description="MSpec It" text="It $IS$ = () =&gt; $END$;" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="InCSharpTypeMember" minimumLanguageVersion="2.0" />
    </Scopes>
    <Categories>
      <Category name="MSpec" />
    </Categories>
    <Variables>
      <Variable name="IS" expression="" initialRange="0" />
    </Variables>
    <CustomProperties />
  </Template>
  <Template uid="43b0d7c7-14f5-42d7-8e2b-6030656188ad" shortcut="fail" description="MSpec It for Exceptions" text="static Exception Exception;&#xD;&#xA;&#xD;&#xA;It fails = () =&gt; Exception.ShouldNotBeNull();&#xD;&#xA;&#xD;&#xA;" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="InCSharpTypeMember" minimumLanguageVersion="2.0" />
    </Scopes>
    <Categories>
      <Category name="MSpec" />
    </Categories>
    <Variables />
    <CustomProperties />
  </Template>
</TemplatesExport>