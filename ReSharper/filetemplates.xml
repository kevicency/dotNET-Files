<TemplatesExport>
  <Template uid="68f10676-f1a1-4cfa-814a-a0ad75cba33d" shortcut="" description="NUnit Fixture" text="using System;&#xD;&#xA;using nunit;&#xD;&#xA;&#xD;&#xA;namespace $NAMESPACE$&#xD;&#xA;{&#xD;&#xA;	[TestFixture]&#xD;&#xA;	public class $FIXTURE$&#xD;&#xA;	{&#xD;&#xA;		$END$     &#xD;&#xA;	}&#xD;&#xA;}" reformat="True" shortenQualifiedReferences="True">
    <Context>
      <ProjectLanguageContext language="CSharp" />
    </Context>
    <Categories />
    <Variables>
      <Variable name="FIXTURE" expression="getFileNameWithoutExtension()" initialRange="0" />
      <Variable name="NAMESPACE" expression="fileDefaultNamespace()" initialRange="0" />
    </Variables>
    <CustomProperties>
      <Property key="FileName" value="Class" />
      <Property key="Extension" value="cs" />
      <Property key="ValidateFileName" value="True" />
    </CustomProperties>
  </Template>
  <Template uid="30f3dad4-c277-45bb-a120-514b1974a592" shortcut="" description="NUnit Fixture full" text="using System;&#xD;&#xA;using nunit;&#xD;&#xA;&#xD;&#xA;namespace $NAMESPACE$&#xD;&#xA;{&#xD;&#xA;	[TestFixture]&#xD;&#xA;	public class $FIXTURE$&#xD;&#xA;	{&#xD;&#xA;		#region SetUp &amp; TearDown&#xD;&#xA;&#xD;&#xA;		[TestFixtureSetUp]&#xD;&#xA;		public void FixtureSetUp() { }&#xD;&#xA;&#xD;&#xA;		[TestFixtureTearDown]&#xD;&#xA;		public void FixureTearDown() { }&#xD;&#xA;&#xD;&#xA;		[SetUp]&#xD;&#xA;		public void SetUp() { }&#xD;&#xA;&#xD;&#xA;		[TearDown]&#xD;&#xA;		public void TearDown() { }&#xD;&#xA;&#xD;&#xA;		#endregion&#xD;&#xA;&#xD;&#xA;		[Test]&#xD;&#xA;		public void $TEST$()&#xD;&#xA;		{&#xD;&#xA;		   $END$     &#xD;&#xA;		}&#xD;&#xA;	}&#xD;&#xA;}" reformat="True" shortenQualifiedReferences="True">
    <Context>
      <ProjectLanguageContext language="CSharp" />
    </Context>
    <Categories />
    <Variables>
      <Variable name="FIXTURE" expression="getFileNameWithoutExtension()" initialRange="0" />
      <Variable name="NAMESPACE" expression="fileDefaultNamespace()" initialRange="-1" />
      <Variable name="TEST" expression="" initialRange="0" />
    </Variables>
    <CustomProperties>
      <Property key="FileName" value="Class" />
      <Property key="Extension" value="cs" />
      <Property key="ValidateFileName" value="False" />
    </CustomProperties>
  </Template>
  <Template uid="2a4a3cae-7593-43e6-8403-e0a70f5a8bdd" shortcut="" description="MSpec" text="using System;&#xD;&#xA;using Machine.Specifications;&#xD;&#xA;&#xD;&#xA;namespace $NAMESPACE$&#xD;&#xA;{&#xD;&#xA;  [Subject(typeof($TYPE$))]&#xD;&#xA;  public class $CONTEXT$_Spec&#xD;&#xA;  {&#xD;&#xA;    Establish context = () =&gt; { | };&#xD;&#xA;&#xD;&#xA;    Because of = () =&gt; { };&#xD;&#xA;&#xD;&#xA;    It is = () =&gt; { };&#xD;&#xA;  }&#xD;&#xA;}" reformat="True" shortenQualifiedReferences="True">
    <Scopes>
      <Scope type="InCSharpProjectFile" />
    </Scopes>
    <Categories />
    <Variables>
      <Variable name="TYPE" expression="" initialRange="0" />
      <Variable name="CONTEXT" expression="capitalize(TYPE)" initialRange="0" />
      <Variable name="NAMESPACE" expression="fileDefaultNamespace()" initialRange="-1" />
    </Variables>
    <CustomProperties>
      <Property key="FileName" value="NewFile" />
      <Property key="Extension" value="txt" />
      <Property key="ValidateFileName" value="False" />
    </CustomProperties>
  </Template>
</TemplatesExport>